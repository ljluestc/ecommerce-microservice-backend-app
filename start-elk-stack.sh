#!/bin/bash

set -e

echo "üöÄ Starting ELK Stack with Ecommerce Microservices..."

# Function to check if a service is healthy
check_health() {
    local url=$1
    local service_name=$2
    local max_attempts=30
    local attempt=1

    echo "Checking health of $service_name..."

    while [ $attempt -le $max_attempts ]; do
        if curl -f -s "$url" > /dev/null 2>&1; then
            echo "‚úÖ $service_name is healthy!"
            return 0
        fi

        echo "‚è≥ Waiting for $service_name (attempt $attempt/$max_attempts)..."
        sleep 10
        attempt=$((attempt + 1))
    done

    echo "‚ùå $service_name failed to become healthy after $max_attempts attempts"
    return 1
}

# Create logs directory
echo "üìÅ Creating logs directory..."
mkdir -p logs

# Start ELK Stack
echo "üî• Starting ELK Stack..."
docker-compose -f docker-compose-elk.yml up -d

# Wait for Elasticsearch to be ready
echo "‚è≥ Waiting for Elasticsearch..."
check_health "http://localhost:9200/_cluster/health" "Elasticsearch"

# Wait for Kibana to be ready
echo "‚è≥ Waiting for Kibana..."
check_health "http://localhost:5601/api/status" "Kibana"

# Initialize Elasticsearch indices and Kibana
echo "üîß Setting up Elasticsearch indices and Kibana..."
./elk-init.sh

# Start Kibana dashboards setup
echo "üìä Setting up Kibana dashboards..."
./kibana-setup.sh

echo "üèóÔ∏è Starting microservices..."
# Start the microservices
docker-compose up -d

# Wait for services to be ready
services=(
    "http://localhost:8761:Service Discovery"
    "http://localhost:9296:Cloud Config"
    "http://localhost:8080:API Gateway"
    "http://localhost:8700/actuator/health:User Service"
    "http://localhost:8500/actuator/health:Product Service"
    "http://localhost:8300/actuator/health:Order Service"
    "http://localhost:8400/actuator/health:Payment Service"
    "http://localhost:8600/actuator/health:Shipping Service"
    "http://localhost:8800/actuator/health:Favourite Service"
)

for service_info in "${services[@]}"; do
    IFS=':' read -r url name <<< "$service_info"
    check_health "$url" "$name" || echo "‚ö†Ô∏è $name may not be fully ready, but continuing..."
done

echo ""
echo "üéâ ELK Stack and Microservices are running!"
echo ""
echo "üìç Access Points:"
echo "  üîç Elasticsearch: http://localhost:9200"
echo "  üìä Kibana:        http://localhost:5601"
echo "  üåê API Gateway:   http://localhost:8080"
echo "  üì° Zipkin:        http://localhost:9411"
echo ""
echo "üîß ELK Stack Services:"
echo "  üì• Logstash:      localhost:5044 (Beats), localhost:5000 (TCP/UDP)"
echo "  üìà APM Server:    http://localhost:8200"
echo ""
echo "üè™ Ecommerce Services:"
echo "  üë§ User Service:     http://localhost:8700"
echo "  üì¶ Product Service:  http://localhost:8500"
echo "  üõí Order Service:    http://localhost:8300"
echo "  üí≥ Payment Service:  http://localhost:8400"
echo "  üöö Shipping Service: http://localhost:8600"
echo "  ‚ù§Ô∏è Favourite Service: http://localhost:8800"
echo "  üîÑ Proxy Client:     http://localhost:8900"
echo ""
echo "üìö To view logs in real-time:"
echo "  docker-compose -f docker-compose-elk.yml logs -f"
echo ""
echo "üõë To stop everything:"
echo "  docker-compose -f docker-compose-elk.yml down"
echo "  docker-compose down"
echo ""

# Generate some sample logs
echo "üìù Generating sample logs..."
curl -s http://localhost:8080/actuator/health > /dev/null || true
curl -s http://localhost:8700/actuator/health > /dev/null || true
curl -s http://localhost:8500/actuator/health > /dev/null || true

echo "‚ú® Setup complete! Check Kibana at http://localhost:5601 for dashboards and logs."